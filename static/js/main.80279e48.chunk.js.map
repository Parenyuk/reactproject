{"version":3,"sources":["App.module.css","components/HumanQuailities/HumanQuality/HumanQuality.module.css","components/MessageBody/UserIcon/UserIcon.module.css","components/HumanQuailities/HumanQualities.module.css","components/MessageBody/Message/UserName/UserName.module.css","components/MessageBody/Message/Message.module.css","components/MessageBody/Message/Time/Time.module.css","components/MessageBody/MessageBody.module.css","components/HumanQuailities/HumanQuality/HumanQuality.jsx","components/HumanQuailities/HumanQualities.jsx","components/MessageBody/Message/UserName/UserName.jsx","components/MessageBody/Message/UserText/UserText.jsx","components/MessageBody/Message/Time/Time.jsx","components/MessageBody/Message/Message.jsx","components/MessageBody/UserIcon/UserIcon.jsx","components/MessageBody/MessageBody.jsx","components/Counter/CounterButton/CounterButton.jsx","components/Counter/CounterInput/CounterInput.jsx","components/Counter/CounterScreen/CounterScreen.jsx","components/Counter/Counter.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","HumanQuality","props","className","id","s","SecondElement","HumanQuallity","humanQualities","HumanQualities","state","humanQualitiesData","this","map","d","key","Component","UserName","userName","UserText","Time","date","timerID","setInterval","Date","str","getHours","getMinutes","setState","clearInterval","React","Message","message","UserIcon","userIcon","img","src","MessageBody","CounterButton","onClick","onButtonClick","onChange","onInputMessage","CounterInput","value","CounterScreen","count","Counter","e","currentTarget","alert","incrementCounter","currentValue","counter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.80279e48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__IMZRG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HumanQuallity\":\"HumanQuality_HumanQuallity__3tGQC\",\"SecondElement\":\"HumanQuality_SecondElement__2d1Qq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"UserIcon_img__kR9uK\",\"userIcon\":\"UserIcon_userIcon__2XR4s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"HumanQualities\":\"HumanQualities_HumanQualities__28nKc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userName\":\"UserName_userName__3tX-l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1DmNa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Time\":\"Time_Time__esUVi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MessageBody\":\"MessageBody_MessageBody__1FHsh\"};","import React from \"react\";\r\nimport s from './HumanQuality.module.css';\r\n\r\nconst HumanQuality = (props) => {\r\n    return (\r\n        <div className={props.id === 2 ? s.SecondElement : s.HumanQuallity}>\r\n            {props.humanQualities}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HumanQuality;\r\n\r\n\r\n","import React, {Component} from \"react\";\r\nimport s from './HumanQualities.module.css';\r\nimport HumanQuality from \"./HumanQuality/HumanQuality\";\r\n\r\nexport default class HumanQualities extends Component {\r\n    state = {\r\n        humanQualitiesData: [\r\n            {id: 1, humanQualities: `рационалист`} ,\r\n            {id: 2, humanQualities: `комуннист`},\r\n            {id: 3, humanQualities: `анимешник`},\r\n            {id: 4, humanQualities: `атеист`}\r\n        ]\r\n    }\r\n    render () {\r\n\r\n\r\n        return (\r\n            <div className={s.HumanQualities}>\r\n                {this.state.humanQualitiesData.map(d => <HumanQuality key={d.id} id={d.id} humanQualities={d.humanQualities} />)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport s from './UserName.module.css'\r\n\r\nconst UserName = () => {\r\n    return (\r\n        <div className={s.userName}>\r\n            Victor Parenyuk\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserName;","import React from \"react\";\r\nimport s from './UserText.css'\r\n\r\nconst UserText = () => {\r\n    return (\r\n        <div className={s.UserText}>\r\n            Hello React!  Hello React!  Hello React!  Hello React!  Hello React!  Hello React!  Hello React!Hello React!  Hello React!  Hello React!  Hello React!  Hello React!Hello React!  Hello React!  Hello React!  Hello React!  Hello React!\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserText;","import React from \"react\";\r\nimport s from './Time.module.css'\r\n\r\nclass Time extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {date: ''};\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => {\r\n                let date = new Date();\r\n                let str = `${date.getHours()}:${date.getMinutes()}`;\r\n                this.setState({date: str})\r\n            },\r\n            1000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.Time}>\r\n                {this.state.date}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n/*ВАРІАНТ 2 ГОДИННИК З СЕКУНДАМИ!!!\r\nclass Time extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let time = new Date();\r\n        this.state = {date: new Date()};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.setState({date: new Date()}),\r\n            1000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.Time}>\r\n                {this.state.date.toLocaleTimeString()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n */\r\n\r\n/*\r\nclass Time extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            time: new Date().toLocaleString()\r\n\r\n        };\r\n    }\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.intervalID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n    tick() {\r\n        this.setState({\r\n            time: new Date().toLocaleString()\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.time}.\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n*/\r\n\r\n\r\nexport default Time;","import React from \"react\";\r\nimport UserName from \"./UserName/UserName\";\r\nimport UserText from \"./UserText/UserText\";\r\nimport s from './Message.module.css'\r\nimport Time from \"./Time/Time\";\r\n\r\n\r\nconst Message = () => {\r\n    return (\r\n        <div className={s.message}>\r\n            <UserName/>\r\n            <UserText/>\r\n            <Time/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from './UserIcon.module.css'\r\n\r\nconst UserIcon = () => {\r\n    return (\r\n        <div className={s.userIcon}>\r\n            <img className={s.img} src={'https://themes.iamabdus.com/dealsy/1.0/img/user/user-thumb.jpg'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserIcon;","import React from \"react\";\r\nimport Message from \"./Message/Message\";\r\nimport UserIcon from \"./UserIcon/UserIcon\";\r\nimport s from './MessageBody.module.css'\r\n\r\nconst MessageBody = (props) => {\r\n    return (\r\n        <div className={s.MessageBody}>\r\n            <UserIcon/>\r\n            <Message/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageBody;","import React from \"react\";\r\n\r\n\r\n const CounterButton = (props) => {\r\n    return (\r\n        <div>\r\n            <button onClick={props.onButtonClick} onChange={props.onInputMessage}>button</button>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default CounterButton;","import React from \"react\";\r\n\r\n\r\nconst CounterInput = (props) => {\r\n    return (\r\n        <div>\r\n            <input onChange={props.onInputMessage} value={props.message}/>\r\n        </div>\r\n    )\r\n}\r\nexport default CounterInput;","import React from \"react\";\r\n\r\n\r\nconst CounterScreen = (props) => {\r\n    return (\r\n        <div>\r\n            <span>{props.count}</span>\r\n        </div>\r\n    )\r\n}\r\nexport default CounterScreen;","import React from \"react\";\r\nimport s from './Counter.module.css'\r\nimport CounterButton from \"./CounterButton/CounterButton\";\r\nimport CounterInput from \"./CounterInput/CounterInput\";\r\nimport CounterScreen from \"./CounterScreen/CounterScreen\";\r\n\r\nexport default class Counter extends React.Component {\r\n    state = {\r\n        count: 0,\r\n        message: ''\r\n    }\r\n    onInputMessage = (e) => {\r\n        this.setState({message: e.currentTarget.value});\r\n\r\n    }\r\n    onButtonClick = () => {\r\n        alert(this.state.message);\r\n        this.setState({message: ''});\r\n\r\n        this.incrementCounter()\r\n    }\r\n    incrementCounter = () => this.setState((currentValue) => ({count: currentValue.count + 1}));\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.counter}>\r\n                <div className={s.count}>\r\n                   <CounterScreen count={this.state.count} />\r\n                </div>\r\n                <CounterInput onInputMessage={this.onInputMessage} message={this.state.message}/>\r\n                <CounterButton onButtonClick={this.onButtonClick}  onInputMessage={this.onInputMessage}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}","import React from 'react';\nimport './App.module.css';\nimport s from './App.module.css';\nimport HumanQualities from \"./components/HumanQuailities/HumanQualities\";\nimport MessageBody from \"./components/MessageBody/MessageBody\";\nimport Counter from \"./components/Counter/Counter\";\n\nfunction App() {\n  return (\n      <div className={s.App}>\n        <div>\n            <MessageBody/>\n        </div>\n        <div>\n          <HumanQualities/>\n        </div>\n          <div>\n            <Counter/>\n          </div>\n\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}